#!/usr/bin/env -S cargo +nightly -Zscript --quiet
---
[package]
edition = "2021"

[dependencies]
duct = "0.13"
anyhow = "1.0"
clap = { version = "4.5", features = ["derive"] }
---

use std::env;

use clap::{Parser, ValueEnum};
use duct::cmd;

#[derive(Parser)]
pub struct Opts {
    /// Tasks name
    #[arg(value_enum)]
    pub tasks: Option<Vec<Task>>,
}

#[derive(Debug, Clone, ValueEnum)]
pub enum Task {
    Cargo,
    Flatpak,
    System,
    Node,
}

fn main() -> anyhow::Result<()> {
    let opts = Opts::parse();

    match opts.tasks {
        None => run_all()?,
        Some(tasks) => run_some(tasks)?,
    }

    println!("\nâœ¨ You have a new shiny machine!");
    Ok(())
}

fn run_all() -> anyhow::Result<()> {
    flatpak()?;
    cargo()?;
    node()?;
    system()?;
    Ok(())
}

fn run_some(modules: Vec<Task>) -> anyhow::Result<()> {
    for module in modules {
        match module {
            Task::Flatpak => flatpak()?,
            Task::Cargo => cargo()?,
            Task::Node => node()?,
            Task::System => system()?,
        }
    }
    Ok(())
}

fn flatpak() -> anyhow::Result<()> {
    println!("ðŸ“¥ Upgrading Flatpak apps");
    cmd!("flatpak", "update").run()?;
    Ok(())
}

fn cargo() -> anyhow::Result<()> {
    println!("ðŸ¦€ Upgrading Cargo apps");
    cmd!("cargo", "install-update", "-a").run()?;
    cmd!("rustup", "update", "stable").run()?;
    Ok(())
}

fn system() -> anyhow::Result<()> {
    println!("ðŸ“¥ Upgrading System apps");
    cmd!("sudo", "dnf", "update").run()?;
    Ok(())
}

fn node() -> anyhow::Result<()> {
    println!("ðŸ“¥ Upgrading Node apps");
    let dir = format!("{}/opt/nodebin", env::var("HOME")?);
    cmd!("npx", "taze", "major", "--write").dir(&dir).run()?;
    cmd!("npm", "install").dir(&dir).run()?;
    Ok(())
}

// Local Variables:
// mode: rust-ts
// End:

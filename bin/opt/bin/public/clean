#!/usr/bin/env rust-script
//! Clean
//!
//! Don't clutter my machine!
//!
//! Usage:
//!
//! Just run it as normal executable file:
//!
//! ```shell
//! $ ./clean
//! ```
//!
//! ```cargo
//! [dependencies]
//! xflags = "0.3"
//! xshell = "0.2"
//! anyhow = "1.0"
//! ```
use std::fs;
use xshell::{cmd, Shell};

fn home() -> anyhow::Result<String> {
    Ok(std::env::var("HOME")?)
}

fn tmp() -> anyhow::Result<()> {
    let sh = Shell::new()?;

    println!("ðŸ§½ Cleaning temporary files");
    let home = home()?;
    let paths = fs::read_dir(format!("{home}/.tmp"))?;
    for path in paths {
        sh.remove_path(path?.path())?;
    }
    Ok(())
}

fn all() -> anyhow::Result<()> {
    let sh = Shell::new()?;

    tmp()?;

    println!("ðŸ§½ Cleaning dependencies and build artifacts");
    cmd!(sh, "kondo --older 1M").run()?;

    println!("ðŸ§½ Cleaning unused layer");
    cmd!(sh, "rpm-ostree cleanup --base").run()?;

    println!("ðŸ§½ Cleaning unused flatpak package");
    cmd!(sh, "flatpak uninstall --unused").run()?;

    println!("ðŸ§½ Cleaning dagling images");
    cmd!(sh, "podman system prune").run()?;

    Ok(())
}

fn main() -> anyhow::Result<()> {
    let flags = xflags::parse_or_exit! {
        /// target
        optional target: String
    };

    match flags.target {
        Some(s) => match s.as_ref() {
            "tmp" => tmp()?,
            _ => all()?,
        },
        None => all()?,
    };
    println!("âœ¨ You have a new shiny machine!");

    Ok(())
}

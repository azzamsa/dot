#!/usr/bin/env -S cargo +nightly -Zscript --quiet
---
[package]
edition = "2021"

[dependencies]
jiff = "0.2.1"
owo-colors = "4.0"
anyhow = "1.0"
---

//! Age
//!
//! All my family age.
//!
//! Usage:
//!
//! Just run it as normal executable file:
//!
//! ```shell
//! $ ./age
//! ```
//!
//! Development:
//!
//! ```
//! $ rustfmt +nightly age
//! ```

use jiff::{
    civil::Date,
    fmt::friendly::{Designator, SpanPrinter},
    fmt::strtime,
    Unit, Zoned,
};
use owo_colors::OwoColorize;

struct Person {
    name: String,
    dob: Date,
}

struct Company {
    name: String,
    join_date: Date,
}

fn main() -> anyhow::Result<()> {
    let people = [
        Person {
            name: String::from("Aragorn II Elessar"),
            dob: "1985-06-15".parse()?,
        },
        Person {
            name: String::from("Arwen Undómiel"),
            dob: "1990-12-02".parse()?,
        },
        Person {
            name: String::from("Eldarion Telcontar"),
            dob: "2021-01-20".parse()?,
        },
    ];
    birthdays(&people)?;
    println!();

    let marriage_date: Date = "2015-06-10".parse()?;
    marriage(marriage_date)?;
    println!();

    let companies = [
        Company {
            name: String::from("Rivendell Holdings"),
            join_date: "2010-04-15".parse()?,
        },
        Company {
            name: String::from("Shire Goods Co."),
            join_date: "2018-09-01".parse()?,
        },
    ];
    jobs(&companies)?;

    Ok(())
}

fn birthdays(people: &[Person]) -> anyhow::Result<()> {
    for (index, person) in people.iter().enumerate() {
        birthday(person)?;
        // don't print new line for the last person
        if index != people.len() - 1 {
            println!();
        }
    }
    Ok(())
}

fn birthday(person: &Person) -> anyhow::Result<()> {
    println!("{}", format!("👶🏼 {} age", person.name).magenta().bold());

    let span = Zoned::now().date().since((Unit::Year, person.dob))?;

    println!("Born at: {}", format_date(person.dob)?.underline());
    println!("Age: {age}", age = humanize(span),);
    Ok(())
}

fn marriage(date: Date) -> anyhow::Result<()> {
    println!("{}", "💍 Marriage".magenta().bold());
    let span = Zoned::now().date().since((Unit::Year, date))?;

    println!("You got married on {}", format_date(date)?.underline());
    println!("It has been {}", format!("{span:#}"),);

    Ok(())
}

fn jobs(companies: &[Company]) -> anyhow::Result<()> {
    for company in companies {
        job(&company)?
    }

    Ok(())
}

fn job(company: &Company) -> anyhow::Result<()> {
    println!("{}", "🛠  Work️".magenta().bold());

    let span = Zoned::now().date().since((Unit::Year, company.join_date))?;

    println!(
        "You began your career at {company_name} on {join_date}",
        company_name = company.name.underline(),
        join_date = format_date(company.join_date)?.underline()
    );
    println!("It has been {}", humanize(span));

    Ok(())
}

// Formats the given time into a custom string format.
fn format_date(date: Date) -> anyhow::Result<String> {
    Ok(strtime::format("%a, %d %b %Y", date)?)
}

// Turn duration into human readable format
fn humanize(span: jiff::Span) -> String {
    let printer = SpanPrinter::new().designator(Designator::HumanTime);
    printer.span_to_string(&span)
}

// vim: ft=rust

// Local Variables:
// mode: rust-ts
// End:

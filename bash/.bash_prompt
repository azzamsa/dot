#!/usr/bin/env bash

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1 || [ -n "$INSIDE_EMACS" ]; then
    export TERM='xterm-256color';
fi;


prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

	# check if the current directory is in .git before running git checks
	if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

	    # Ensure the index is up to date.
	    git update-index --really-refresh -q &>/dev/null;

	    # Check for uncommitted changes in the index.
	    if ! $(git diff --quiet --ignore-submodules --cached); then
		s+='+';
	    fi;

	    # Check for unstaged changes.
	    if ! $(git diff-files --quiet --ignore-submodules --); then
		s+='!';
	    fi;

	    # Check for untracked files.
	    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		s+='?';
	    fi;

	    # Check for stashed files.
	    if $(git rev-parse --verify refs/stash &>/dev/null); then
		s+='$';
	    fi;

	fi;

	# Get the short symbolic ref.
	# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
	# Otherwise, just give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${2}${s}";
    else
	return;
    fi;
}

function prompt_venv(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv="${VIRTUAL_ENV##*/}"
    else
        # In case you don't have one activated
        venv=''
    fi
    [[ -n "$venv" ]] && echo "<$venv> "
}

if tput setaf 1 &> /dev/null; then
    # use all possible 256 color (8 bit)
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
    darkseagreen=$(tput setaf 115);
    grey74=$(tput setaf 250);
else
    # use only 4 bit color
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
    darkseagreen="\e[1;115m";
    grey74="\e[1;253m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="";
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
# PS1+="\[${userStyle}\]screen"; # for screencast username
PS1+="\[${grey74}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
# PS1+="\[${hostStyle}\]cast"; # for sreencast host
PS1+="\[${grey74}\] in ";
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${grey74}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\[${darkseagreen}\] \$(prompt_venv)" # virtualenv
PS1+="\n";
PS1+="\[${grey74}\]\$ \e[0m"; # `$` (and reset color)

export PS1;

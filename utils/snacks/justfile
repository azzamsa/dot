#!/usr/bin/env -S just --justfile

alias d := dev
alias f := fmt
alias l := lint
alias p := deploy

[doc('List available commands')]
_default:
    just --list --unsorted

[confirm('⚠️ This command will alter your system. Run recipe `setup`?')]
[doc('Setup the repository')]
setup:
    just _cargo-install 'cargo-outdated bacon'

[doc('Publish the binaries')]
deploy: check
    cargo test

[doc('Tasks to make the code-base comply with the rules. Mostly used in git hooks')]
comply: fmt lint _doc-check

[doc('Check if the repository comply with the rules and ready to be pushed')]
check: fmt-check lint _doc-check

[doc('Develop the app')]
dev:
    bacon

[doc('Format the codebase')]
fmt:
    cargo fmt --all

[doc('Check is the codebase properly formatted')]
fmt-check:
    cargo fmt --all -- --check

[doc('Lint the codebase')]
lint:
    cargo clippy --locked --all-targets --all-features

[doc('Check the documentation')]
_doc-check:
    cargo doc --all-features --no-deps

[doc('Check dependencies health. Pass `--write` to upgrade dependencies')]
[unix]
up arg="":
    #!/usr/bin/env bash
    if [ "{{ arg }}" = "--write" ]; then
        cargo upgrade --incompatible --recursive --verbose
        cargo update
        dprint config update
    else
        cargo outdated --root-deps-only
    fi;

#
# Helper

[doc('Install using plain cargo or cargo-binstall')]
[unix]
_cargo-install tool:
    #!/usr/bin/env bash
    if command -v cargo-binstall >/dev/null 2>&1; then
        echo "cargo-binstall..."
        cargo binstall --no-confirm --no-symlinks {{ tool }}
    else
        echo "Building from source"
        cargo install --locked {{ tool }}
    fi
